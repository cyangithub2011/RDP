name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Firewall rule for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create RDP User with Random Complex Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @(
            65..90 + 97..122 + 48..57 + (33..47 + 58..64 + 91..96 + 123..126)
          ) -join ''
          $password = -join ((1..16) | ForEach-Object { $charSet | Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          } else {
              Set-LocalUser -Name "RDP" -Password $securePass
          }
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

      - name: Install Dependencies (DirectX, VC++)
        run: |
          # VC++ 2015-2022
          $vcUrl = "https://aka.ms/vs/17/release/vc_redist.x64.exe"
          $vcPath = "$env:TEMP\vc_redist.exe"
          Invoke-WebRequest -Uri $vcUrl -OutFile $vcPath
          Start-Process $vcPath -ArgumentList "/install /quiet /norestart" -Wait
          Remove-Item $vcPath -Force

          # DirectX Web Installer (new official link)
          $dxUrl = "https://download.microsoft.com/download/1/7/1/1718ccc4-6315-4d8e-9543-8e28a4e18c4c/dxwebsetup.exe"
          $dxPath = "$env:TEMP\dxwebsetup.exe"
          Invoke-WebRequest -Uri $dxUrl -OutFile $dxPath
          Start-Process $dxPath -ArgumentList "/silent" -Wait
          Remove-Item $dxPath -Force

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned. Exiting."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Error "TCP connection failed"; exit 1 }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active"
              Start-Sleep -Seconds 300
          }
